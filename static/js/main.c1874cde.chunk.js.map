{"version":3,"sources":["images/oven.gif","logo.svg","Search.js","apiClient.js","Result.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","props","handleQueryChange","query","setState","target","value","handleCloseClick","state","updateQuery","bind","e","this","body","className","placeholder","onChange","onKeyPress","event","key","document","getElementById","click","onClick","to","pathname","style","hidden","id","Component","client","axios","create","baseURL","json","data","APIClient","perform","method","resource","url","then","resp","console","log","Result","list","loading","apiClient","location","getResults","items","length","alt","height","width","src","ovenLoad","map","item","href","link","backgroundImage","image","class","Prep","Cook","title","desc","reloadResults","App","useEffect","fetch","response","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1874cde.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/oven.678dbbff.gif\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react'\r\nimport './search.css';\r\nimport { Link } from 'react-router-dom'\r\nclass Search extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            query: ''\r\n        };\r\n        this.updateQuery = this.updateQuery.bind(this);\r\n        this.handleQueryChange = this.handleQueryChange.bind(this);\r\n\r\n    }\r\n    async updateQuery(e) {\r\n        this.setState({ query: e.target.value })\r\n    }\r\n    handleQueryChange = query => {\r\n        debugger;\r\n        this.setState({\r\n            query: query.target.value\r\n        });\r\n    };\r\n    handleCloseClick = () => {\r\n        this.setState({\r\n            query: '',\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let body = null;\r\n        body = (\r\n            <header className=\"clssearch-container\">\r\n                <div>\r\n                    <h1 className=\"clssearch-header\">\r\n                        COMBIN-ING\r\n                    </h1>\r\n\r\n                    <div className=\"clssearch-box\">\r\n                        <input\r\n                            placeholder='Search Ingredients ...'\r\n                            className='clssearch-txt' value={this.state.query} onChange={this.handleQueryChange}\r\n                            onKeyPress={(event) => {\r\n                                if (event.key === 'Enter' || event.key === 'Return') {\r\n                                    var link = document.getElementById('resulttest');\r\n                                    link.click();\r\n                                }\r\n                            }}\r\n                        />\r\n                        <button\r\n                            className=\"clssearch-boxClose\"\r\n                            onClick={this.handleCloseClick}\r\n                        >\r\n                            x\r\n                </button>\r\n                    </div>\r\n                    <Link to={{\r\n                        pathname: \"/results\", query: {\r\n                            query: this.state.query\r\n                        }\r\n                    }} style={{ hidden: true }} id=\"resulttest\">\r\n                    </Link>\r\n\r\n                </div >\r\n\r\n            </header>\r\n\r\n        )\r\n\r\n        var error = null;\r\n\r\n        return (\r\n            <div >\r\n                {error}\r\n                <div className=\"clssearch-container\">\r\n\r\n                    {body}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Search;","import axios from 'axios';\r\nconst BASE_URI = 'http://127.0.0.1:5000';\r\nconst client = axios.create({\r\n    baseURL: BASE_URI,\r\n    json: true,\r\n    data:{}\r\n});\r\nclass APIClient {\r\n\r\n\r\n\r\n    getResults(query) {\r\n        if (query)\r\n            return this.perform('post', 'http://35.170.249.243/results', query)\r\n        else {\r\n            this.perform('get', '/');\r\n        }\r\n    }\r\n\r\n    async perform(method, resource, data) {\r\n        return client({\r\n            method,\r\n            url: resource,\r\n            data: data\r\n        }).then(resp => {\r\n            console.log(resp);\r\n            return resp.data ? resp.data : [];\r\n        })\r\n    }\r\n}\r\n\r\nexport default APIClient;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport APIClient from './apiClient'\r\nimport './search.css';\r\nimport ovenLoad from './images/oven.gif';\r\nclass Result extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            list: [],\r\n            loading: false,\r\n            query: \"\"\r\n        };\r\n        this.handleQueryChange = this.handleQueryChange.bind(this);\r\n    }\r\n    // componentWillReceiveProps(nextProps, nextState) {\r\n    //     this.getResults()\r\n    // }\r\n    handleQueryChange = query => {\r\n        this.setState({\r\n            query: query.target.value\r\n        });\r\n    };\r\n    handleCloseClick = () => {\r\n        this.setState({\r\n            query: '',\r\n        });\r\n    };\r\n\r\n    async componentDidMount() {\r\n        try {\r\n\r\n            this.apiClient = new APIClient();\r\n            if (this.props.location && this.props.location.query.query) {\r\n                this.setState({ loading: true })\r\n                this.apiClient.getResults(this.props.location.query.query).then((data) =>\r\n                    this.setState({ ...this.state, list: data, loading: false, query: this.props.location.query.query })\r\n                );\r\n            }\r\n            else{\r\n                var link = document.getElementById('resulttest1');\r\n                link.click();\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            this.setState({ loading: true });\r\n        }\r\n\r\n    }\r\n    async reloadResults() {\r\n        try {\r\n\r\n            this.apiClient = new APIClient();\r\n            if (this.state.query) {\r\n                this.setState({ loading: true })\r\n                this.apiClient.getResults(this.state.query).then((data) =>\r\n                    this.setState({ ...this.state, list: data, loading: false, query: this.state.query })\r\n                );\r\n            }\r\n            else {\r\n                var link = document.getElementById('resulttest1');\r\n                link.click();\r\n            }\r\n\r\n        }\r\n        catch (e) {\r\n            console.log(e);\r\n            this.setState({ loading: true });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let body = null;\r\n        let searchlist = null;\r\n        var items = null;\r\n        if (this.state.list.length === 0 && this.state.loading) {\r\n            items =\r\n                <div>\r\n                    <h1>Enjoy the Aroma! The chefs are working for you...</h1>\r\n                    <br />\r\n                    <img alt=\"Oven\" height=\"500\" width=\"500\" src={ovenLoad} />\r\n                </div>\r\n        }\r\n        else if (this.state.list.length > 0) {\r\n            items = this.state.list.map((item, key) =>\r\n\r\n                <div className=\"carddisplay\">\r\n\r\n                    <a href={item.link} target=\"_blank\">\r\n                        <figure style={{ backgroundImage: `linear-gradient( rgba(0,0,0,.5), rgba(0,0,0,.5) ),url(${item.image})` }} className=\"figure\">\r\n                            <div class=\"date\"><div>\r\n                                <strong>Prep</strong>:{item.Prep}\r\n                            </div>\r\n                                <div>\r\n                                    <strong>Cook</strong>:{item.Cook}\r\n                                </div></div>\r\n                            <figcaption>\r\n                                <h4> <span>{item.title}</span></h4>\r\n                                <p>{item.desc}</p>\r\n\r\n                            </figcaption>\r\n\r\n                        </figure>\r\n                    </a>\r\n\r\n                    {/* <div>\r\n                        <a href={item.link} className=\"clslistlink\">{item.title}</a>\r\n\r\n                    </div>\r\n                    <div className=\"clsmainlink\">www.foodfood.com</div>\r\n                    <div className=\"clsdesc\">{item.desc}</div> */}\r\n                </div>);\r\n        }\r\n        else {\r\n            items = <div><h1>Sorry! No Results Found</h1></div>\r\n        }\r\n\r\n        body = (\r\n            <div>\r\n\r\n                <div className=\"clssearch-boxrp\">\r\n                    <input\r\n                        placeholder='Search Ingredients...'\r\n                        className='clssearch-txt' value={this.state.query} onChange={this.handleQueryChange}\r\n                        onKeyPress={(event) => {\r\n                            if (event.key === 'Enter' || event.key === 'Return') {\r\n                                this.reloadResults()\r\n                            }\r\n                        }}\r\n                    />\r\n                    <button\r\n                        className=\"clssearch-boxClose\"\r\n                        onClick={this.handleCloseClick}\r\n                    >\r\n                        x\r\n                </button>\r\n                </div>\r\n                <Link to={{\r\n                    pathname: \"/\", query: {\r\n                        query: this.state.query\r\n                    }\r\n                }} style={{ hidden: true }} id=\"resulttest1\">\r\n                </Link>\r\n                <h2> Search results for : {this.state.query}</h2>\r\n                <hr />\r\n            </div >\r\n\r\n        )\r\n\r\n        var error = null;\r\n\r\n        return (\r\n            <div >\r\n                {error}\r\n                {body}\r\n                {items}\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nexport default Result;","import React,{useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Switch } from 'react-router-dom';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport Search from './Search';\nimport Result from './Result';\n\nfunction App() {\n  useEffect(()=>{\n    fetch(\"/\").then(response =>\n      response.json().then(data => {\n        console.log(data)\n      }))\n  },[])\n  return (\n    <Router>\n      <div className=\"App\">\n       \n\n          <Switch>\n            <Route path=\"/\" exact component={Search} />\n            <Route path=\"/results\" exact component={Result} />\n            <Route path=\"\" exact component={Search} />\n          </Switch>\n      </div>\n\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}